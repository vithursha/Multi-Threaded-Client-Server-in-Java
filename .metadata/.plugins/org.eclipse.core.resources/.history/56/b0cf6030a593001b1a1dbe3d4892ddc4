import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

public class EntranceOneClient {

	public static void main(String[] args) throws IOException {

		// Set up the client socket, in and out variables
		// client designed to connect to server 
		Socket ActionClientSocket = null;
		PrintWriter out = null;
		BufferedReader in = null;
		// same port as server and other clients 
		int ActionSocketNumber = 4321;
		String ActionServerName = "localhost";
		String ActionClientID = "ActionClient1";

		try {
			// create a socket with the input 
			ActionClientSocket = new Socket(ActionServerName, ActionSocketNumber);
			out = new PrintWriter(ActionClientSocket.getOutputStream(), true);
			in = new BufferedReader(new InputStreamReader(ActionClientSocket.getInputStream()));
		} catch (UnknownHostException e) {
			System.err.println("Don't know about host: localhost ");
			System.exit(1);
		} catch (IOException e) {
			// if client is run before the server 
			System.err.println("Couldn't get I/O for the connection to: "+ ActionSocketNumber);
			System.exit(1);
		}

		// // wait in queue if no space 
		BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
		String fromServer;
		String fromUser;
		int car = 0; 
		boolean entry1=false; 
		boolean entry1Q = false; 

		System.out.println("Initialised " + ActionClientID + " client and IO connections");

		// This is modified as it's the client that speaks first

		// true = infinite loop 
		while (true) {

			// readLine = waits for user to type something 
			// the program reads a line and prints it on the server 
			fromUser = stdIn.readLine();
			if ( car < SharedVariable) {
				if (fromUser != null) {
					 entry1 = true;
					System.out.println("car entered car park");
				}
	
		}
			else 
				 entry1Q = true; 
			System.out.println("car park full. Car added to entrance One queue.");
		}

		// Tidy up - not really needed due to true condition in while loop
		//  out.close();
		// in.close();
		// stdIn.close();
		// ActionClientSocket.close();
	}
}


